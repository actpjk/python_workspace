{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"머신러닝102_12lenet","provenance":[],"authorship_tag":"ABX9TyNend7WpPk+Wxo7SWZKTW+o"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2bcv2tJZl5ND","executionInfo":{"status":"ok","timestamp":1610858015337,"user_tz":-540,"elapsed":2869,"user":{"displayName":"안녕구름아","photoUrl":"","userId":"05761503287783464441"}},"outputId":"92a44a52-0304-4244-d7e0-1ca6fe5baa7e"},"source":["import tensorflow as tf\r\n","import pandas as pd \r\n","\r\n","# 데이터 준비\r\n","\r\n","(독립, 종속), _ = tf.keras.datasets.mnist.load_data()\r\n","독립 = 독립.reshape(60000,28,28,1)  # convoultion layer는 이미지 하나에 shape의 모양이 2차원이 아닌 3차원이어야함.\r\n","종속 = pd.get_dummies(종속)\r\n","print(독립.shape, 종속.shape)"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n","11493376/11490434 [==============================] - 0s 0us/step\n","(60000, 28, 28, 1) (60000, 10)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"d361pBNJmNIT","executionInfo":{"status":"ok","timestamp":1610857907284,"user_tz":-540,"elapsed":2016,"user":{"displayName":"안녕구름아","photoUrl":"","userId":"05761503287783464441"}}},"source":["# 모델 만들기\r\n","\r\n","x = tf.keras.layers.Input(shape=[28, 28, 1])\r\n","h = tf.keras.layers.Conv2D(6, kernel_size=5, padding='same', activation='swish')(x)\r\n","h = tf.keras.layers.MaxPool2D()(h)\r\n","\r\n","h = tf.keras.layers.Conv2D(16, kernel_size=5, activation='swish')(h)\r\n","h = tf.keras.layers.MaxPool2D()(h)\r\n","\r\n","h = tf.keras.layers.Flatten()(h) # 한 줄로 펴줌\r\n","h = tf.keras.layers.Dense(120, activation='swish')(h)\r\n","h = tf.keras.layers.Dense(84, activation='swish')(h)\r\n","y = tf.keras.layers.Dense(10, activation='softmax')(h)\r\n","\r\n","model = tf.keras.models.Model(x,y)\r\n","model.compile(loss='categorical_crossentropy', metrics='accuracy')"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":369},"id":"bzP04-zPnDXE","executionInfo":{"status":"error","timestamp":1610857984952,"user_tz":-540,"elapsed":3089,"user":{"displayName":"안녕구름아","photoUrl":"","userId":"05761503287783464441"}},"outputId":"e7457310-2ba0-42c5-eb95-272afddd11ce"},"source":["# 데이터 학습\r\n","model.fit(독립, 종속, epochs=5)"],"execution_count":6,"outputs":[{"output_type":"stream","text":["Epoch 1/5\n","  80/1875 [>.............................] - ETA: 46s - loss: 0.0662 - accuracy: 0.9801"],"name":"stdout"},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-6-a25e3a952ea4>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# 데이터 학습\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m독립\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m종속\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1098\u001b[0m                 _r=1):\n\u001b[1;32m   1099\u001b[0m               \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_train_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1100\u001b[0;31m               \u001b[0mtmp_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1101\u001b[0m               \u001b[0;32mif\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshould_sync\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1102\u001b[0m                 \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masync_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    826\u001b[0m     \u001b[0mtracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    827\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mtrace\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTrace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_name\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mtm\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 828\u001b[0;31m       \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    829\u001b[0m       \u001b[0mcompiler\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"xla\"\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_experimental_compile\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m\"nonXla\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    830\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    853\u001b[0m       \u001b[0;31m# In this case we have created variables on the first call, so we run the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    854\u001b[0m       \u001b[0;31m# defunned version which is guaranteed to never create variables.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 855\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateless_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=not-callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    856\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateful_fn\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    857\u001b[0m       \u001b[0;31m# Release the lock early so that multiple threads can perform the call\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2941\u001b[0m        filtered_flat_args) = self._maybe_define_function(args, kwargs)\n\u001b[1;32m   2942\u001b[0m     return graph_function._call_flat(\n\u001b[0;32m-> 2943\u001b[0;31m         filtered_flat_args, captured_inputs=graph_function.captured_inputs)  # pylint: disable=protected-access\n\u001b[0m\u001b[1;32m   2944\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2945\u001b[0m   \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1917\u001b[0m       \u001b[0;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1918\u001b[0m       return self._build_call_outputs(self._inference_function.call(\n\u001b[0;32m-> 1919\u001b[0;31m           ctx, args, cancellation_manager=cancellation_manager))\n\u001b[0m\u001b[1;32m   1920\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n\u001b[1;32m   1921\u001b[0m         \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    558\u001b[0m               \u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    559\u001b[0m               \u001b[0mattrs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mattrs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 560\u001b[0;31m               ctx=ctx)\n\u001b[0m\u001b[1;32m    561\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    562\u001b[0m           outputs = execute.execute_with_cancellation(\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     58\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0;32m---> 60\u001b[0;31m                                         inputs, attrs, num_outputs)\n\u001b[0m\u001b[1;32m     61\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"markdown","metadata":{"id":"AxbZjl1onS2Z"},"source":["cifar_10"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4mbGklpjnRl3","executionInfo":{"status":"ok","timestamp":1610858064882,"user_tz":-540,"elapsed":1463,"user":{"displayName":"안녕구름아","photoUrl":"","userId":"05761503287783464441"}},"outputId":"137e243f-b070-4b51-ac31-3f40a68ef7f5"},"source":["(독립, 종속), _ = tf.keras.datasets.cifar10.load_data()\r\n","print(독립.shape, 종속.shape)\r\n","종속 = pd.get_dummies(종속.reshape(50000)) # 원핫인코딩은 표형태가 아닌 1차원 형태일 때 가능함.\r\n","print(독립.shape, 종속.shape)"],"execution_count":4,"outputs":[{"output_type":"stream","text":["(50000, 32, 32, 3) (50000, 1)\n","(50000, 32, 32, 3) (50000, 10)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"FT90rwNWn7xc","executionInfo":{"status":"ok","timestamp":1610858149049,"user_tz":-540,"elapsed":6253,"user":{"displayName":"안녕구름아","photoUrl":"","userId":"05761503287783464441"}}},"source":["# 모델 만들기\r\n","\r\n","x = tf.keras.layers.Input(shape=[32, 32, 3])\r\n","h = tf.keras.layers.Conv2D(6, kernel_size=5, activation='swish')(x)\r\n","h = tf.keras.layers.MaxPool2D()(h)\r\n","\r\n","h = tf.keras.layers.Conv2D(16, kernel_size=5, activation='swish')(h)\r\n","h = tf.keras.layers.MaxPool2D()(h)\r\n","\r\n","h = tf.keras.layers.Flatten()(h) # 한 줄로 펴줌\r\n","h = tf.keras.layers.Dense(120, activation='swish')(h)\r\n","h = tf.keras.layers.Dense(84, activation='swish')(h)\r\n","y = tf.keras.layers.Dense(10, activation='softmax')(h)\r\n","\r\n","model = tf.keras.models.Model(x,y)\r\n","model.compile(loss='categorical_crossentropy', metrics='accuracy')"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"G4pXzzYln7ud","executionInfo":{"status":"ok","timestamp":1610858221710,"user_tz":-540,"elapsed":69134,"user":{"displayName":"안녕구름아","photoUrl":"","userId":"05761503287783464441"}},"outputId":"640f747d-693e-469c-c60f-6e1e3f779ed0"},"source":["model.fit(독립, 종속, epochs=10)"],"execution_count":6,"outputs":[{"output_type":"stream","text":["Epoch 1/10\n","1563/1563 [==============================] - 13s 4ms/step - loss: 3.5069 - accuracy: 0.1039\n","Epoch 2/10\n","1563/1563 [==============================] - 6s 4ms/step - loss: 2.1650 - accuracy: 0.1955\n","Epoch 3/10\n","1563/1563 [==============================] - 6s 4ms/step - loss: 1.6488 - accuracy: 0.4089\n","Epoch 4/10\n","1563/1563 [==============================] - 6s 4ms/step - loss: 1.5258 - accuracy: 0.4595\n","Epoch 5/10\n","1563/1563 [==============================] - 6s 4ms/step - loss: 1.4459 - accuracy: 0.4883\n","Epoch 6/10\n","1563/1563 [==============================] - 6s 4ms/step - loss: 1.4288 - accuracy: 0.5016\n","Epoch 7/10\n","1563/1563 [==============================] - 6s 4ms/step - loss: 1.3926 - accuracy: 0.5173\n","Epoch 8/10\n","1563/1563 [==============================] - 6s 4ms/step - loss: 1.4094 - accuracy: 0.5122\n","Epoch 9/10\n","1563/1563 [==============================] - 6s 4ms/step - loss: 1.3915 - accuracy: 0.5243\n","Epoch 10/10\n","1563/1563 [==============================] - 6s 4ms/step - loss: 1.3914 - accuracy: 0.5252\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.keras.callbacks.History at 0x7f7530247518>"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3iWkKlJgn7sl","executionInfo":{"status":"ok","timestamp":1610858222492,"user_tz":-540,"elapsed":767,"user":{"displayName":"안녕구름아","photoUrl":"","userId":"05761503287783464441"}},"outputId":"d15e62ae-79b9-42ea-a71e-bb4afe04dc83"},"source":["model.summary()"],"execution_count":7,"outputs":[{"output_type":"stream","text":["Model: \"model\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input_1 (InputLayer)         [(None, 32, 32, 3)]       0         \n","_________________________________________________________________\n","conv2d (Conv2D)              (None, 28, 28, 6)         456       \n","_________________________________________________________________\n","max_pooling2d (MaxPooling2D) (None, 14, 14, 6)         0         \n","_________________________________________________________________\n","conv2d_1 (Conv2D)            (None, 10, 10, 16)        2416      \n","_________________________________________________________________\n","max_pooling2d_1 (MaxPooling2 (None, 5, 5, 16)          0         \n","_________________________________________________________________\n","flatten (Flatten)            (None, 400)               0         \n","_________________________________________________________________\n","dense (Dense)                (None, 120)               48120     \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 84)                10164     \n","_________________________________________________________________\n","dense_2 (Dense)              (None, 10)                850       \n","=================================================================\n","Total params: 62,006\n","Trainable params: 62,006\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":195},"id":"i0jKaUuYn7qx","executionInfo":{"status":"ok","timestamp":1610858274082,"user_tz":-540,"elapsed":718,"user":{"displayName":"안녕구름아","photoUrl":"","userId":"05761503287783464441"}},"outputId":"a4d300f9-5303-465c-e8b1-b199df5e28de"},"source":["pred = model.predict(독립[0:5])\r\n","pd.DataFrame(pred).round(3)"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>7</th>\n","      <th>8</th>\n","      <th>9</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.006</td>\n","      <td>0.000</td>\n","      <td>0.079</td>\n","      <td>0.183</td>\n","      <td>0.190</td>\n","      <td>0.286</td>\n","      <td>0.058</td>\n","      <td>0.198</td>\n","      <td>0.000</td>\n","      <td>0.000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.001</td>\n","      <td>0.006</td>\n","      <td>0.000</td>\n","      <td>0.000</td>\n","      <td>0.000</td>\n","      <td>0.000</td>\n","      <td>0.000</td>\n","      <td>0.000</td>\n","      <td>0.012</td>\n","      <td>0.981</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.332</td>\n","      <td>0.030</td>\n","      <td>0.161</td>\n","      <td>0.004</td>\n","      <td>0.009</td>\n","      <td>0.002</td>\n","      <td>0.001</td>\n","      <td>0.029</td>\n","      <td>0.016</td>\n","      <td>0.415</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.017</td>\n","      <td>0.004</td>\n","      <td>0.224</td>\n","      <td>0.070</td>\n","      <td>0.328</td>\n","      <td>0.067</td>\n","      <td>0.250</td>\n","      <td>0.033</td>\n","      <td>0.004</td>\n","      <td>0.003</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.007</td>\n","      <td>0.616</td>\n","      <td>0.000</td>\n","      <td>0.000</td>\n","      <td>0.000</td>\n","      <td>0.000</td>\n","      <td>0.000</td>\n","      <td>0.001</td>\n","      <td>0.014</td>\n","      <td>0.362</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["       0      1      2      3      4      5      6      7      8      9\n","0  0.006  0.000  0.079  0.183  0.190  0.286  0.058  0.198  0.000  0.000\n","1  0.001  0.006  0.000  0.000  0.000  0.000  0.000  0.000  0.012  0.981\n","2  0.332  0.030  0.161  0.004  0.009  0.002  0.001  0.029  0.016  0.415\n","3  0.017  0.004  0.224  0.070  0.328  0.067  0.250  0.033  0.004  0.003\n","4  0.007  0.616  0.000  0.000  0.000  0.000  0.000  0.001  0.014  0.362"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XMTBS6Ban7oJ","executionInfo":{"status":"ok","timestamp":1610858311075,"user_tz":-540,"elapsed":732,"user":{"displayName":"안녕구름아","photoUrl":"","userId":"05761503287783464441"}},"outputId":"0099c0ee-8a0c-48d2-ca63-9a5f6c02e67d"},"source":["print(종속[0:5])"],"execution_count":11,"outputs":[{"output_type":"stream","text":["   0  1  2  3  4  5  6  7  8  9\n","0  0  0  0  0  0  0  1  0  0  0\n","1  0  0  0  0  0  0  0  0  0  1\n","2  0  0  0  0  0  0  0  0  0  1\n","3  0  0  0  0  1  0  0  0  0  0\n","4  0  1  0  0  0  0  0  0  0  0\n"],"name":"stdout"}]}]}